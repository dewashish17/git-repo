git init    ---> initialize to track  a folder

git status ---> for checking status of relatives to go stage
git log    --> all the history of relative pic in wedding stage 
git add .   --> to set the relative into stage
git restore --staged(-S) filenmae --> to unstage the relative
git restore filename -- > to unchaged into files
git commit -m "your message" --> finally entering history into record
git reset hashid --> to restore particular history

to hide a file without commiting  we can use STASH

git add. --> to add into stage
git stash --> temporary store the file from the original folder without entry in record
git stash pop --> to revert back the hidden files
git stash clear --> to permanent remove the files


to use remote storage or github 

git remote -v ---> to check current origin(connected url)
git remote add origin https://github     --> to save url as origin name
git push origin master        --> pushing files into url(origin ) master branch

to create a new branch 

git branch branchname           --> create a new branch
git push origin branchname       --> to push into new branch
git checkout branchname   -->  to change our working branch
git merge branchname      --> to merge this branch into main branch so that people can use it


to clone project from your repo or other
(fork it first so that we can make changes into that )---> by convetion we called it UPSTREAM (folk url)

git clone url    --> to get this project from my url


after committing into github to revert back
you need to reset into your local repositroy and then you have to force push

git push origin branchname -f  ---> commited file of pull requested will be deleted 



fetch upstream to update your code with main project -->

step1:-> git fetch --all --prune(the once at a deleted are also be fetched)
step2:-> git checkout branchname
step3:-> git reset --hard upstream m/main --> to reset your origin code with original main
git log

git push orgin main    --> to deflect into github

or
 (in single code) git pull upstream master




merge conflict and squashing commit 

git rebase -i(instractive ) hashid
 